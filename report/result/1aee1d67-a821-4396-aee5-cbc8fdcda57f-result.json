{"name": "test_run_excel_case[Case0]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not dict", "trace": "self = <case.test_excel_case.TestExcel_case object at 0x0000022AACFFF880>\nCase = {'cookies': '', 'headers': '{\\n           \"Authorization\" : \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjEwM...gQSBqhwzCQcmHSe10K4c0wd1GO-OWCOvWjsZbsMIFRHmtj8wIXyxoYlVyHS9Cnk9-A\"\\n        }', 'status_code': 200.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"Case\",run_list)\n    def test_run_excel_case(self,Case):\n        url = ConfigYaml().config[\"url\"]+Case[ConfigYaml().config[\"excel\"][\"url\"]]\n        case_id=Case[ConfigYaml().config[\"excel\"][\"case_id\"]]\n        case_model=Case[ConfigYaml().config[\"excel\"][\"case_model\"]]\n        case_name=Case[ConfigYaml().config[\"excel\"][\"case_name\"]]\n        pre_exec=Case[ConfigYaml().config[\"excel\"][\"pre_exec\"]]\n        method=Case[ConfigYaml().config[\"excel\"][\"method\"]]\n        params_type=Case[ConfigYaml().config[\"excel\"][\"params_type\"]]\n        params=Case[ConfigYaml().config[\"excel\"][\"params\"]]\n        expect_result=Case[ConfigYaml().config[\"excel\"][\"expect_result\"]]\n        actual_result=Case[ConfigYaml().config[\"excel\"][\"actual_result\"]]\n        is_run=Case[ConfigYaml().config[\"excel\"][\"is_run\"]]\n        headers=Case[ConfigYaml().config[\"excel\"][\"headers\"]]\n        cookies= Case[ConfigYaml().config[\"excel\"][\"cookies\"]]\n        code=Case[ConfigYaml().config[\"excel\"][\"code\"]]\n        db_verify=Case[ConfigYaml().config[\"excel\"][\"db_verify\"]]\n    \n    \n    \n        # # print(url,headers,params)\n        # print(type(headers))\n        # # 如果你想打印 headers 的内容来验证它是否正确设置\n        # for key, value in headers.items():\n        #     print(f\"{key}: {value}\")\n    \n    \n    \n        if  len(str(params).strip()) != 0:\n            params  = json.loads(params)\n        if  len(str(headers).strip()) != 0:\n            headers  = json.loads(headers)\n    \n        # 验证前置条件,找到前置条件用例\n        if pre_exec:\n            pass\n            pre_case  = get_case_pre(pre_exec)\n            print(f\"前置条件信息为{pre_exec}\")\n            per_res =  self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,per_res)\n>       headers = json.loads(headers)\n\ntest_excel_case.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = {'Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjEwMDAwLTI0ODY1ODNhLWIyYzctNGEyMC05MzhlLTYzN2Q5NjY4OWJiNiJ9.NyqolDnLEBaujfEsRGvHgQSBqhwzCQcmHSe10K4c0wd1GO-OWCOvWjsZbsMIFRHmtj8wIXyxoYlVyHS9Cnk9-A'}\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not dict\n\nD:\\Python\\lib\\json\\__init__.py:341: TypeError"}, "parameters": [{"name": "Case", "value": "{'用例ID': 'word_1', '模块': '运维工单', '接口名称': '创建工单', '请求URL': '/maintenance/orderNo', '前置条件': '', '请求类型': 'get', '请求参数类型': 'json', '请求参数': '{\\n            \"orderTypeId\":\"453622917134237696\"\\n        }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\\n           \"Authorization\" : \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjEwMDAwLTI0ODY1ODNhLWIyYzctNGEyMC05MzhlLTYzN2Q5NjY4OWJiNiJ9.NyqolDnLEBaujfEsRGvHgQSBqhwzCQcmHSe10K4c0wd1GO-OWCOvWjsZbsMIFRHmtj8wIXyxoYlVyHS9Cnk9-A\"\\n        }', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1726254469843, "stop": 1726254469908, "uuid": "ed710511-fd2f-4c8d-8a5b-ee3e8cb4822a", "historyId": "4957fab481451648eaf8eb2138a582ed", "testCaseId": "74ece03cc882bdf5889680a5566d1d10", "fullName": "case.test_excel_case.TestExcel_case#test_run_excel_case", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel_case"}, {"name": "host", "value": "张引电脑"}, {"name": "thread", "value": "20088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_excel_case"}]}