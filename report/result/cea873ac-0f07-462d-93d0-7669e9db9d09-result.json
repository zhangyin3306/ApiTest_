{"name": "test_run_excel_case[Case1]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 46 column 24 (char 1432)", "trace": "self = <case.test_excel_case.TestExcel_case object at 0x0000015BCB5BBFA0>\nCase = {'cookies': '', 'headers': '{\\n           \"Authorization\" : \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjEwM...zCQcmHSe10K4c0wd1GO-OWCOvWjsZbsMIFRHmtj8wIXyxoYlVyHS9Cnk10-A\"\\n        }', 'status_code': 200.0, '前置条件': 'word_1', ...}\n\n    @pytest.mark.parametrize(\"Case\",run_list)\n    def test_run_excel_case(self,Case):\n        url = ConfigYaml().config[\"url\"]+Case[ConfigYaml().config[\"excel\"][\"url\"]]\n        case_id=Case[ConfigYaml().config[\"excel\"][\"case_id\"]]\n        case_model=Case[ConfigYaml().config[\"excel\"][\"case_model\"]]\n        case_name=Case[ConfigYaml().config[\"excel\"][\"case_name\"]]\n        pre_exec=Case[ConfigYaml().config[\"excel\"][\"pre_exec\"]]\n        method=Case[ConfigYaml().config[\"excel\"][\"method\"]]\n        params_type=Case[ConfigYaml().config[\"excel\"][\"params_type\"]]\n        params=Case[ConfigYaml().config[\"excel\"][\"params\"]]\n        expect_result=Case[ConfigYaml().config[\"excel\"][\"expect_result\"]]\n        actual_result=Case[ConfigYaml().config[\"excel\"][\"actual_result\"]]\n        is_run=Case[ConfigYaml().config[\"excel\"][\"is_run\"]]\n        headers=Case[ConfigYaml().config[\"excel\"][\"headers\"]]\n        cookies= Case[ConfigYaml().config[\"excel\"][\"cookies\"]]\n        code=Case[ConfigYaml().config[\"excel\"][\"code\"]]\n        db_verify=Case[ConfigYaml().config[\"excel\"][\"db_verify\"]]\n    \n    \n    \n        # # print(url,headers,params)\n        # print(type(headers))\n        # # 如果你想打印 headers 的内容来验证它是否正确设置\n        # for key, value in headers.items():\n        #     print(f\"{key}: {value}\")\n    \n    \n    \n        if  len(str(params).strip()) != 0:\n>           params  = json.loads(params)\n\ntest_excel_case.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000015BB8EC47F0>\ns = '{\\n            \"orderTypeParentId\": \"453622917134237696\",\\n            \"orderTypeId\": \"\",\\n            \"threeOrderTyp...n            \"orderNo\": orderNo,\\n            \"handleUser\": \"10000\",\\n            \"handleUserName\": \"系统管理员\"\\n        }'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 46 column 24 (char 1432)\n\nD:\\Python\\lib\\json\\decoder.py:355: JSONDecodeError"}, "parameters": [{"name": "Case", "value": "{'用例ID': 'word_2', '模块': '运维工单', '接口名称': '提交工单', '请求URL': '/maintenance/saveOrderInfo', '前置条件': 'word_1', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '{\\n            \"orderTypeParentId\": \"453622917134237696\",\\n            \"orderTypeId\": \"\",\\n            \"threeOrderTypeId\": \"\",\\n            \"urgencyLevel\": \"1\",\\n            \"orderDesc\": \"<p>对地点</p>\",\\n            \"stationName\": \"桩企测试专用站\",\\n            \"region\": [\\n                \"13\",\\n                \"1310\",\\n                \"131082\"\\n            ],\\n            \"address\": \"燕郊站\",\\n            \"checkGroupIds\": [],\\n            \"deviceNo\": \"\",\\n            \"deviceTypeName\": \"\",\\n            \"deviceModelName\": \"\",\\n            \"customerName\": \"\",\\n            \"contact\": \"\",\\n            \"contactTel\": \"\",\\n            \"carBrand\": \"\",\\n            \"carModel\": \"\",\\n            \"appointmentTime\": \"\",\\n            \"shelfLife\": \"0\",\\n            \"installMethod\": \"\",\\n            \"mainUser\": \"\",\\n            \"platform\": \"\",\\n            \"projectType\": \"\",\\n            \"projectCode\": \"\",\\n            \"installUnit\": \"\",\\n            \"enableMethod\": \"\",\\n            \"salesmanName\": \"\",\\n            \"businessType\": \"1\",\\n            \"businessTypeName\": \"充电\",\\n            \"city\": \"1310\",\\n            \"county\": \"131082\",\\n            \"deptName\": \"江南水务\",\\n            \"onlineDate\": \"2024-06-25\",\\n            \"operationMode\": \"1\",\\n            \"province\": \"13\",\\n            \"regionName\": \"江南水务\",\\n            \"stationAddress\": \"燕郊站\",\\n            \"stationCode\": \"zhang\",\\n            \"stationId\": \"463385701627645952\",\\n            \"status\": \"02\",\\n            \"orderNo\": orderNo,\\n            \"handleUser\": \"10000\",\\n            \"handleUserName\": \"系统管理员\"\\n        }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\\n           \"Authorization\" : \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjEwMDAwLTI0ODY1ODNhLWIyYzctNGEyMC05MzhlLTYzN2Q5NjY4OWJiNiJ9.NyqolDnLEBaujfEsRGvHgQSBqhwzCQcmHSe10K4c0wd1GO-OWCOvWjsZbsMIFRHmtj8wIXyxoYlVyHS9Cnk10-A\"\\n        }', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1726247708811, "stop": 1726247708861, "uuid": "103b5ad5-1dbd-49b3-9f30-4dbf44ec3a69", "historyId": "df9787bee830c66a72ad11ff84dd8098", "testCaseId": "74ece03cc882bdf5889680a5566d1d10", "fullName": "case.test_excel_case.TestExcel_case#test_run_excel_case", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel_case"}, {"name": "host", "value": "张引电脑"}, {"name": "thread", "value": "12056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_excel_case"}]}