{"name": "test_run_excel_case[Case1]", "status": "broken", "statusDetails": {"message": "KeyError: 0", "trace": "self = <case.test_excel_case.TestExcel_case object at 0x00000279EE21DE20>\nCase = {'cookies': '', 'headers': '{\\n           \"Authorization\" : \"Bearer ${token}$\"\\n        }', 'status_code': 200.0, '前置条件': 'word_1', ...}\n\n    @pytest.mark.parametrize(\"Case\",run_list)\n    def test_run_excel_case(self,Case):\n        url = ConfigYaml().config[\"url\"]+Case[ConfigYaml().config[\"excel\"][\"url\"]]\n        case_id=Case[ConfigYaml().config[\"excel\"][\"case_id\"]]\n        case_model=Case[ConfigYaml().config[\"excel\"][\"case_model\"]]\n        case_name=Case[ConfigYaml().config[\"excel\"][\"case_name\"]]\n        pre_exec=Case[ConfigYaml().config[\"excel\"][\"pre_exec\"]]\n        method=Case[ConfigYaml().config[\"excel\"][\"method\"]]\n        params_type=Case[ConfigYaml().config[\"excel\"][\"params_type\"]]\n        params=Case[ConfigYaml().config[\"excel\"][\"params\"]]\n        expect_result=Case[ConfigYaml().config[\"excel\"][\"expect_result\"]]\n        actual_result=Case[ConfigYaml().config[\"excel\"][\"actual_result\"]]\n        is_run=Case[ConfigYaml().config[\"excel\"][\"is_run\"]]\n        headers=Case[ConfigYaml().config[\"excel\"][\"headers\"]]\n        cookies= Case[ConfigYaml().config[\"excel\"][\"cookies\"]]\n        code=Case[ConfigYaml().config[\"excel\"][\"code\"]]\n        db_verify=Case[ConfigYaml().config[\"excel\"][\"db_verify\"]]\n    \n    \n    \n        # # print(url,headers,params)\n        # print(type(headers))\n        # # 如果你想打印 headers 的内容来验证它是否正确设置\n        # for key, value in headers.items():\n        #     print(f\"{key}: {value}\")\n    \n    \n    \n        if  len(str(params).strip()) != 0:\n            params  = json.loads(params)\n        if  len(str(headers).strip()) != 0:\n            headers  = json.loads(headers)\n    \n        # 验证前置条件,找到前置条件用例\n        if pre_exec:\n            pass\n            pre_case  = get_case_pre(pre_exec)\n            print(f\"前置条件信息为{pre_exec}\")\n            per_res =  self.run_pre(pre_case)\n>           headers,cookies = self.get_correlation(headers,cookies,per_res)\n\ntest_excel_case.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <case.test_excel_case.TestExcel_case object at 0x00000279EE21DE20>\nheaders = {'Authorization': 'Bearer ${token}$'}, cookies = ''\npre_res = {'body': {'code': '40000', 'message': '请求访问：/charging-maintenance-server/maintenance/orderNo，认证失败，无法访问系统资源', 'success': False}, 'code': 200}\n\n    def get_correlation(self, headers, cookies, pre_res):\n        \"\"\"\n        关联\n        :param headers:\n        :param cookies:\n        :param pre_res:\n        :return:\n        \"\"\"\n        # 验证是否有关联\n        headers_para, cookies_para = Base.params_find(headers, cookies)\n        # 有关联，执行前置用例，获取结果\n        if len(headers_para):\n>           headers_data = pre_res[\"body\"][headers_para[0]]\nE           KeyError: 0\n\ntest_excel_case.py:104: KeyError"}, "attachments": [{"name": "log", "source": "06211db4-8b29-4f11-ae07-89be64375dc9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "Case", "value": "{'用例ID': 'word_3', '模块': '运维工单', '接口名称': '创建工单', '请求URL': '/maintenance/orderNo', '前置条件': 'word_1', '请求类型': 'get', '请求参数类型': 'json', '请求参数': '{\\n            \"orderTypeId\":\"453622917134237696\"\\n        }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\\n           \"Authorization\" : \"Bearer ${token}$\"\\n        }', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1726255647826, "stop": 1726255648001, "uuid": "85c60091-59c6-4245-846c-1eb595870169", "historyId": "5e610c72a42b964fd5c33ea1869f5ea1", "testCaseId": "74ece03cc882bdf5889680a5566d1d10", "fullName": "case.test_excel_case.TestExcel_case#test_run_excel_case", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel_case"}, {"name": "host", "value": "张引电脑"}, {"name": "thread", "value": "17904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_excel_case"}]}